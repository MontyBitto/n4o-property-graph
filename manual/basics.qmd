---
title: Grundlagen
lang: de
---

Zur Nutzung des Knowledge Graphen ist das Verständnis einiger Grundbegriffe
notwendig. An dieser Stelle folgt eine kurze, allgemeine Einführung. Technische
Details und Hintergründe finden sich im Kapitel zur
[Systemarchitektur](architecture.qmd).

## Knowledge Graph

In einem **Knowledge Graph** (auch **Wissensgraph**) sind Informationen
strukturiert und stark miteinander vernetzt gespeichert. Ein Beispiel hierfür
ist ein Netzwerk aus Personen, die durch Verwandschaft und andere Beziehungen
miteinander verknüpft sind.  Jeder Graph besteht aus **Knoten** und **Kanten**.
So lassen sich beispielsweise Personen durch Knoten und Beziehungen durch Kanten
repräsentieren.

Weitere Details hängen von der technischen Umsetzung des Knowledge Graphen ab.
Die beiden am häufigsten verwendeten Datenbankmodelle sind
[**Property-Graphen**](#property-graphen) und das RDF-Datenmodell mit
[**Triple-Stores**](#triple-stores). Darüber hinaus gibt es einige Knowledge
Graphen mit eigenem Datenbankmodell, beispielsweise
[Wikidata](https://www.wikidata.org/) auf Grundlage von des Wikibase-Modells.

Die Inhalte eines Knowledge Graphen besteht aus einem [**Schema**](#schema),
optional einigen [**Vokabularen**](#vokabular) und dem
[**Datenbestand**](#datenbestand) als eigentlichem Datenbankinhalt.
Einzelne "Datensätze" gibt es aufgrund der Graphstruktur nicht.

## Datenbankmodelle

### Property Graphen

Property-Graphen dienen der Strukturierung, Speicherung und Auswertung
vernetzter Daten. Die Daten werden dabei nicht in tabellarischer Form (wie bei
einer Tabellenkalkulation oder bei SQL) oder in hierarchischer Form (wie bei
XML) sondern in Form eines **Graphen** gespeichert. Die Knoten und Kanten des
Graphen können jeweils **Labels** (Typen) haben und mit **Eigenschaften**
versehen sein. Zur Abfrage von Property-Graphen dient die Sprache
[Cypher](cypher.qmd).

::: {.callout-tip}
Eine weitergehende Erklärung zu Property-Graphen liefert der Artikel
[Property-Graphen: eine kurze Einführung](https://jakobib.github.io/pgraphen2024/).
:::

<!--
Im Gegensatz zu RDF sind Property Graphen nicht als allgemeines Format zum
Austausch und zur Integration von Daten gedacht. Der Property Graph von
NFDI4Objects benötigt daher eine [Schema](#schema.qmd) das festlegt,
welche Arten von Knoten und Kanten wie miteinander verknüpft und mit
Eigenschaften versehen werden können.
-->

### Triple-Store

Ein Triple Store ist eine [Graphendatenbank](https://de.wikipedia.org/wiki/Graphdatenbank) in der Daten dem RDF-Modell nach in Form von so genannten Triplen gespeichert werden. Jedes **Tripel** entspricht in der Regel einer Kante im Graphen und besteht aus Subjekt, Prädikat und Objekt. Als Abfragesprache für RDF-Daten in Triple-Stores dient [SPARQL](sparql.qmd).

## Datenbankinhalt

### Schema

Das (Datenbank)Schema oder **Datenmodell** eines Knowledge Graphen bestimmt welche Arten von Knoten, Kanten und weiterer Inhalte im Graph enthalten sein dürfen.

Da sich die Datenbankmodelle von Property-Graphen und Triple-Store unterscheiden, gibt es für beide ein jeweils eigenes Schema. Beide basieren jedoch auf einem gemeinsamen abstrakten Datenmodell.

*Details hierzu unter [Datenbankschema](schema.qmd).*

### Vokabular

Vokabulare sind vorgegebene Listen von Entitäten oder Werten. Sie sind in Form von Identifikatoren, Datentypen und/oder Knoten und Kanten zwar Teil des Knowledge-Graphen gehören aber eher nicht zum eigentlichen Datenbestand. Vokabulare werden nur in unregelmäßign Abständen und zentral aktualisiert. Sie dürfen nicht durch Lieferungen von [Sammlungen](#sammlungen) überschrieben werden.

*Details hierzu unter [Vokabulare](vocabularies.qmd).*

### Datenbestand

Der wesentliche Inhalt des gemeinsamen Knowledge Graphen von NFDI4IObjekts. Er wird im Gegensatz zu Schema und Vokabularen laufend aktualisiert.

*Details hierzu unter [Datenquellen](sources.qmd).*

### Sammlung

Der eigentliche Inhalt des gemeinsamen Knowledge Graphen von NFDI4IObjekts ist in so genannte **Sammlungen** unterteilt. Einige Sammlungbestehen aus einzelnen Datensätzen, andere aus einer zusammengefassten Lieferung von Daten. 

*Details hierzu unter [Datenquellen](sources.qmd).*

