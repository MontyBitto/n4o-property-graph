---
title: Grundlagen
lang: de
---

*In diesem Kapitel sollen einige Grundlagen erklärt werden*

## Property Graphen

Property-Graphen bilden ein flexibles und nicht zu kompliziertes Werkzeug zur
Strukturierung, Speicherung und Auswertung vernetzter Daten. Dabei werden Daten
nicht wie beispielsweise bei SQL in Form von Tabellen, sondern in Form von
Graphen aus *Knoten* gespeichert, die durch *Kanten* miteinander verbunden
sind. Sowohl Knoten als auch Kanten können mit *Eigenschaften* versehen werden
und haben jeweils *Labels* als Angabe ihrer Art. 

Eine weitergehende, allgemeine Erklärung zu Property-Graphen bietet der Artikel
[Property-Graphen: eine kurze Einführung](https://jakobib.github.io/pgraphen2024/).

Im Gegensatz zu RDF sind Property Graphen nicht als allgemeines Format zum
Austausch und zur Integration von Daten gedacht. Der Property Graph von
NFDI4Objects benötigt daher eine [Datenmodell](#data-model.qmd) das festlegt,
welche Arten von Knoten und Kanten wie miteinander verknüpft und mit
Eigenschaften versehen werden können.

Ein Property-Graph kann mit [Cypher-Abfragen](cypher.qmd) nähere Informationen über seinen Inhalt liefern und verändert werden. Dafür muss er in Neo4j oder einer anderen Graphdatenbank, die mit Cypher-Anfragen umgehen kann, übertragen werden. Cypher ist eine SQL-aquivalente Sprache für Graphdatenbanken. 

## Triple-Store

Ein **Triple Store** ist eine [Graphendatenbank](https://de.wikipedia.org/wiki/Graphdatenbank), die auf Basis von [RDF](https://de.wikipedia.org/wiki/Resource_Description_Framework) Daten in Subjekt-Prädikat-Objekt Triples speichert. Das Subjekt und Objekt stellen die Knoten dar, die über ein Prädikat verbunden sind.

Der Triple-Store kann mit [SPARQL](sparql.qmd) abgefragt werden.

