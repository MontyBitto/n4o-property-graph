---
title: Technische Architektur
---

## Datenannahme

Siehe [n4o-import](https://github.com/nfdi4objects/n4o-import)

## Datenfluss

LIDO-XML-Daten werden mit Hilfe von [X3ML](https://github.com/isl/x3ml)
konvertiert. Die Konvertierung von RDF-Daten, nachdem diese mit
[n4o-rdf-import](https://github.com/nfdi4objects/n4o-rdf-import)
angenommen wurden, steht noch aus.

![](img/data-flow.svg)

## Expansion der Klassenhierarchie

Da Property-Graphen im Gegensatz zu RDF keine Inferenz-Regeln beinhalten und
weil Inferenz-Regeln sowieso umständlich sind, werden die Daten im
Property-Graphen *expandiert*.  Grundlage ist ein eigener Property-Graph mit
der Klassenhierarchie des CIDOC-CRM Datenmodell samt zwischenzeitlich
umbenannter oder veralteter Klassen in der Datei `crm-classes.pg` (siehe
[SVG-Diagram](img/crm-classes.svg)). Der Graph aller Klassen enthält Informationen
darüber welche Klassen sich aus einer anderen ergeben, z.B.

- `E22_Man_Made_Object` => `E22_Human_Made_Object` (renamedTo)
- `E50_Date` => `E41_Appellation` (replacedBy)
- `E7_Activity`=> `E5_Event` (superClass)

Aus diesen Daten wird die Expansionstabelle [`crm-expand.txt`](crm-expand.txt)
erzeugt, z.B.:

- `E22_Human_Made_Object` => `E22`, `E71`, `E70`, `E24` `E77` und `E1`

Zum Ausführen der Expansion: 

~~~sh
./pg-expand-labels.py [Neo4j login file] < crm-expand.txt
~~~

Ohne Konfigurationsdatei für Neo4J werden Cypher-Kommandos ausgegeben. Mit
Konfiguration wird die Expansion in der betreffenden Neo4J-Datenbank
ausgeführt.

Nach der Expansion ist die Abfrage nach allen Knoten mit einem bestimmten Label
wie z.B. `E22_Human_Made_Object` möglich oder nach allen Knoten, die direkt
oder indirekt er Klasse `E22` angehören.

*Die Expansion von zusätzlichen Klassen der [NFDI4Objects Core
Ontology](https://github.com/nfdi4objects/n4o-core-ontology) auf CIDOC-CRM ist
auf die gleiche Weise möglich aber noch nicht umgesetzt.*


