---
title: Abfragen mit Cypher
subtitle: Zugriff auf den Knowledge Graphen per Cypher-API
lang: de
execute:
  echo: false
---

## Öffentliche API

Dieses Kapitel veranschaulicht die Nutzung der [Cypher-API](#cypher-api) zur Abfrage des Property Graphen.

### Demo

```{ojs}
viewof cypherEditor = {
  const mainDiv = html`<div><div>`
  const editorDiv = html`<div style="border: 1px solid rgb(0, 0, 0);"></div>`
  const runButton = html`<button>Query</button>`

  mainDiv.append(editorDiv)
  mainDiv.append(runButton)

  mainDiv.value = []
  yield mainDiv

  let editor = CodeMirror(editorDiv, { mode: "application/x-cypher-query" })

  editor.setValue("MATCH (m:E16_Measurement) RETURN m LIMIT 20")
  editor.setSize(width-20, 200)

  runButton.onclick = async (e) => {
    mainDiv.value = await cypherQuery(editor.getValue())
    mainDiv.dispatchEvent(new CustomEvent("input"))
  }

  return mainDiv
}

cypherEditor
```

### Abfrage mit curl

Die Cypher-Query muss URL-kodiert werden, dabei werden unter anderem
Leerzeichen durch `%20` ersetzt. Der Parameter
[--data-urlencode](https://curl.se/docs/manpage.html#--data-urlencode) sorgt
automatisch dafür:

```sh
curl -G {{< meta public >}} --data-urlencode 'cypher=MATCH (n:`E22_Man-Made_Object`) RETURN n.cID LIMIT 20'
```

Die Cypher-Query kann auch per Datei übergeben werden:

```sh
curl -G {{< meta public >}} --data-urlencode 'cypher@queryfile.cypher'
```

## Einführung in Cypher

Eine vollständige Einführung in die Abfragesprache Cypher liefert [das
englische Cypher Handbuch](https://neo4j.com/docs/cypher-manual/current/).

Die folgende Kurzeinführung bezieht sich noch nicht auf das [Schema](schema.qmd) des Property Graphen sondern verwendet ein
ausgedachtes Beispiel mit Personendaten.

### Nodes

Knoten heißen Nodes und werden in runden Klammern definiert.
```cypher
MATCH (n:Person {name:'Anna'})
RETURN n.geboren AS geburtsjahr
```

Person ist ein Label. Labels sind wie Tags und werden genutzt um die Datenbank zu befragen. Eine Node Kann mehrere Labels haben.  
Name ist eine Property von Anna. Properties werden in geschweiften Klammern definiert and geben nähere Informationen. Nach Properties kann auch gefragt werden.  
N ist eine Variabel. Auf Variabeln kann weiter verwiesen werden.  

In diesem Beispiel findet MATCH alle Person Nodes in dem Graph wo die Property name Anna ist und setzt die Variabel n zu dem Ergebnis. n wird dann an RETURN weitergegeben, welche den Wert von einer anderen Property (geboren) dieser Nodes wiedergibt.  

### Relationships

Nodes können mit Relationships verbunden werden. Eine Relationship braucht eine Start Node, eine Ende Node und genau einen Typ. Relationships haben in Cypher einen Pfeil um die Richting zu zeigen. Die Informationen über eine Relationship sind in eckigen Klammern eingeschlossen.  
Während Nodes mehrere Labels haben können, können Relationships nur einen Typ haben.

```cypher
MATCH (:Person {name: 'Anna'})-[r:KENNT WHERE r.seit < 2020]->(freund:Person)
RETURN count(r) As zahlAnFreunden
```

In dieser Anfrage findet Match Relationships des Typs KENNT wo die Property seit kleiner als 2020 ist. Außerdem müssen Relationships von einer Person Node mit der Property Anna zu einer anderen Personen Node gehen (wir nennen diese freund). count() wird genutzt um zu zählen wie viele Relationships an die Variabel r in MATCH gebunden wurden somit erhalten wir mit RETURN eine Zahl.

### Pfade

```cypher
MATCH (n:Person {name: 'Anna'})-[:KENNT]-{1,5}(freund:Person WHERE n.geboren < freund.geboren)
RETURN DISTINCT freund.name AS ältereFreunde
```

Dieses Beispiel nutzt eine quantifizierte Relationship um alle Pfade, die bis zu 5 Schritte entfernt sind, zu finden. Dabei werden nur Relationships des Typs KENNT verwendet. Die Start Node ist Anna und Ende Node sind Personen älter als Anna. Durch DISTINCT wird das gleiche Ergebnis nur einmal ausgegeben.


```cypher
MATCH p=shortestPath((:Person {name: 'Anna'})-[:KENNT*1..10]-(:Person {nationalität: 'Kanadier'}))
RETURN p
```

Auch Pfade können einer Variable zugewiesen werden. Hier wird der vollständige Pfad ausgegeben.

### Beispielabfragen

Finde Wert, Einheit und Notiz aller Messungen.

```cypher
MATCH (n:E16_Measurement)-[:P40_observed_dimension]->(m:E54_Dimension)-[:P2_has_type]->(:E55_Type)-[:P48_has_preferred_identifier]->(l)
MATCH (m)-[:P91_has_unit]->(:E58_Measurement_Unit)-[:P48_has_preferred_identifier]->(o)
RETURN m.P90_has_value AS value, o.P3_has_note AS unit, l.P3_has_note AS note
```

```{python}
from neo4j import GraphDatabase
import json
with open('neo4j.json', 'r') as file:
  neo4j_login = json.loads(file.read())
  uri = neo4j_login.get("uri")
  user = neo4j_login.get("user")
  password = neo4j_login.get("password")
cmd = "MATCH (n:E16_Measurement)-[:P40_observed_dimension]->(m:E54_Dimension)-[:P2_has_type]->(:E55_Type)-[:P48_has_preferred_identifier]->(l) MATCH (m)-[:P91_has_unit]->(:E58_Measurement_Unit)-[:P48_has_preferred_identifier]->(o) RETURN m.P90_has_value AS value, o.P3_has_note AS unit, l.P3_has_note AS note;"
driver = GraphDatabase.driver(uri, auth=(user, password))
with driver.session() as session:
 for x in session.run(cmd):
  print(','.join((str(x) for x in x.values())))
```

